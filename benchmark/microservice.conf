server {
  listen 80;
  server_name localhost;

  set $service_name "microservice";

  include /etc/api-gateway/conf.d/includes/default_validators.conf;
  include /etc/api-gateway/conf.d/includes/resolvers.conf;

  set $oauth_host 'www.googleapis.com';

  # access_log /dev/stdout;           # redirect access_log to Docker's output
  # error_log /dev/stderr debug;       # redirect error_log to Docker's output

  access_log off;                   # enable this for performance tests
  error_log /dev/stderr error;      # enable this for performance tests

  location = /validate-token {
    internal;
    content_by_lua_file /etc/api-gateway/generated-conf.d/google_oauth2_proxy.lua;
  }

  location /api/ {
    # -------------------------------------------------
    #  Specify what to validate for this location
    # -------------------------------------------------
    set $authtoken $http_authorization;         # read the Bearer Token from the Authorization header
    set_if_empty $authtoken $arg_user_token;    # read the token form the query string if the header is missing
    set_by_lua $authtoken 'return ngx.re.gsub(ngx.arg[1], "bearer ", "","ijo") ' $authtoken;

    set $validate_oauth_token     "on; order=1;";

    access_by_lua_block {
       ngx.apiGateway.validation.validateRequest()
    }

    # Decorate the request with more info from the OAuth validation
    add_header X-GW-Scope $oauth_token_scope;
    add_header X-GW-Client-Id $oauth_token_client_id;
    add_header X-GW-User-Id $oauth_token_user_id;


    content_by_lua_block {
      ngx.say("OK")
    }
  }
}
