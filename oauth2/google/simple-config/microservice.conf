upstream microservice {
  # microservice.docker is defined by docker-compose
  server microservice.docker:8080;
}

server {
  listen 80;
  server_name localhost;

  set $service_name "microservice";

  include /etc/api-gateway/conf.d/includes/default_validators.conf;
  include /etc/api-gateway/conf.d/includes/resolvers.conf;

  set $oauth_host 'www.googleapis.com';

  access_log /dev/stdout;           # redirect access_log to Docker's output
  error_log /dev/stderr warn;       # redirect error_log to Docker's output

  location = /validate-token {
    internal;
    content_by_lua_file /etc/api-gateway/generated-conf.d/google_oauth2_proxy.lua;
  }

  location /api/ {
    # -------------------------------------------------
    #  Specify what to validate for this location
    # -------------------------------------------------
    set $authtoken $http_authorization;         # read the Bearer Token from the Authorization header
    set_if_empty $authtoken $arg_user_token;    # redis the token form the query string if the header is missing
    set_by_lua $authtoken 'return ngx.re.gsub(ngx.arg[1], "bearer ", "","ijo") ' $authtoken;

    set $validate_oauth_token     "on; order=1;";

    access_by_lua_block {
        ngx.apiGateway.validation.validateRequest()
    }

    # -------------------------------------------------
    #  Proxy the request to the actual microservice
    # -------------------------------------------------
    # Decorate the request with more info from the OAuth validation
    proxy_set_header X-GW-Scope $oauth_token_scope;
    proxy_set_header X-GW-Client-Id $oauth_token_client_id;
    proxy_set_header X-GW-User-Id $oauth_token_user_id;

    proxy_pass http://microservice;
  }
}
